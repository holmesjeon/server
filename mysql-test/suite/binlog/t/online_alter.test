
-- source include/have_log_bin.inc
# -- source include/not_embedded.inc
-- source include/have_innodb.inc


# set binlog_format=row;

--connect (con2, localhost, root,,)
--connection default

# reset master;

create table t1 (a int) engine=innodb;
create table t2 (a int) engine=innodb;

# FLUSH LOGS;
begin;
insert t1 values (5);
commit;
begin;
insert t2 values (5);
commit;

# SHOW BINLOG EVENTS;
# SHOW BINLOG EVENTS in 'master-bin.000002';

create or replace table t1 (a int) engine=innodb;
insert t1 values (5);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 add b int NULL, algorithm= copy, lock= none;

--connection con2
--reap
insert into t1 values (123), (456), (789);
set debug_sync= 'now SIGNAL end';

--connection default
--reap
select * from t1;

create or replace table t1 (a int) engine=innodb;
insert t1 values (5);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 add b int NOT NULL, algorithm= copy, lock= none;

--connection con2
--reap
insert into t1 values (123), (456), (789);
set debug_sync= 'now SIGNAL end';

--connection default
--reap
select * from t1;


create or replace table t1 (a int) engine=innodb;
insert t1 values (5);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 add b int NOT NULL default (222), algorithm= copy, lock= none;

--connection con2
--reap
insert into t1 values (123), (456), (789);
set debug_sync= 'now SIGNAL end';

--connection default
--reap
select * from t1;

--echo # test update
create or replace table t1 (a int primary key, b int) engine=innodb;
insert t1 values (1, 22);
insert t1 values (3, 44);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 add c int default(1),
            algorithm= copy, lock= none;

--connection con2
--reap
update t1 set b= 55 where a = 1;
set debug_sync= 'now SIGNAL end';

--connection default
--reap
select * from t1;

--echo # test primary key change
create or replace table t1 (a int primary key, b int) engine=innodb;
insert t1 values (1, 22);
insert t1 values (3, 44);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 drop primary key, add primary key(b),
            algorithm= copy, lock= none;

--connection con2
--reap
update t1 set b= 55 where a = 1;
set debug_sync= 'now SIGNAL end';

--connection default
--reap
select * from t1;

--echo # test primary key change
create or replace table t1 (a int primary key, b int) engine=innodb;
insert t1 values (1, 11);
insert t1 values (2, 22);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 drop primary key, add primary key(b),
            algorithm= copy, lock= none;

--connection con2
--reap
update t1 set b= 33 where a = 1;
update t1 set b= 44 where a = 2;

set debug_sync= 'now SIGNAL end';

--connection default
--reap
select * from t1;

--echo #
--echo # Various tests, see below
--echo #
create or replace table t1 (a int primary key, b int) engine=innodb;
insert t1 values (1, 11);
insert t1 values (2, 22);
insert t1 values (3, 33);
insert t1 values (4, 44);
insert t1 values (5, 55);
insert t1 values (6, 66);
insert t1 values (7, 77);
insert t1 values (8, 88);
insert t1 values (9, 99);

--connection con2
--send
set debug_sync= 'now WAIT_FOR ended';

--connection default
set debug_sync= 'alter_table_copy_end SIGNAL ended WAIT_FOR end';

--send
alter table t1 drop primary key, add primary key(b),
            algorithm= copy, lock= none;

--connection con2
--reap

--echo # Double execution
update t1 set b= 1001 where a = 1;
update t1 set b= 2002 where a = 2;

--echo # Double execution in transaction
set autocommit = 0;
start transaction;
update t1 set b= 3003 where a = 3;
update t1 set b= 4004 where a = 4;
commit;
set autocommit = 1;

--echo # Second execution is rolled back
update t1 set b= 5005 where a = 5;

set autocommit = 0;
start transaction;
update t1 set b= 6006 where a = 6;  ## TODO bug
rollback;
set autocommit = 1;

set debug_sync= 'now SIGNAL end';

--connection default
--reap
--sorted_result
select * from t1;

create or replace table t1 (a int primary key, b int) engine=innodb;
insert t1 values (1, 11);
insert t1 values (2, 22);
insert t1 values (3, 33);
insert t1 values (4, 44);
insert t1 values (5, 55);
insert t1 values (6, 66);
insert t1 values (7, 77);
insert t1 values (8, 88);
insert t1 values (9, 99);
set autocommit = 0;
start transaction;
update t1 set b= 7007 where a = 7;
--error ER_DUPP_KEY
update t1 set b= 8008 where a = 8 or a = 9;
commit;
set autocommit = 1;
select * from t1;

--echo # Cleanup
drop table t1, t2;
